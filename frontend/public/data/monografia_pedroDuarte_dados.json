{
    "Autor": "Pedro Otávio Furtado Duarte",
    "Título": "Um Estudo sobre a Automatização da Geração de Proxy para Sistemas Autodistribuídos",
    "Ano de publicação": 2024,
    "Local de publicação": "Araranguá, SC",
    "Orientador(a)": "Prof. Roberto Vito Rodrigues Filho, Dr.",
    "Coorientador(a)": null,
    "Resumo": "A complexidade dos sistemas atuais vem aumentando de forma gradativa, com isso, algumas soluções como o conceito de sistemas autonômicos foram propostas. Um exemplo importante da aplicação de computação autonômica na tentativa de gerenciar a complexidade na gerência e criação de sistemas são os chamados sistemas autodistribuídos, que surgiram para permitir o desenvolvimento de sistemas locais (i.e., que executam em um único processo) capazes de distribuir seus módulos internos à medida que se vê necessária a utilização de mais recursos computacionais para atender as necessidades dos usuários. Entretanto, o desenvolvimento de sistemas autodistribuídos ainda apresenta certa complexidade, à medida que é necessário o desenvolvimento manual de proxies (i.e., componentes de software) que são injetados na arquitetura local do software e que permite a autodistribuição. Dessa forma, este trabalho propõe uma abordagem de automatizar o processo de geração de proxies. A solução proposta utiliza uma Linguagem de Definição de Interface (IDL), que descreve as informações necessárias para a criação dos proxies de maneira automatizada, ou seja, com o mínimo de interferência humana no processo de implementação dos proxies. A partir dessa linguagem, foi desenvolvido o ProxyGenerator, um artefato em Python que analisa a interface indicada e informações complementares fornecidas pela IDL para gerar proxies que atendam diferentes padrões de interação, como fragmentação (sharding) e replicação propagate e alternate. O trabalho conclui que a automatização da geração de proxies facilita o desenvolvimento de sistemas autodistribuídos, reduzindo a complexidade no desenvolvimento de componentes fundamentais para a implementação de sistemas autodistribuídos, promovendo um maior número de possibilidades de distribuição que podem ser exploradas em tempo de execução para localizar a melhor composição do sistemas distribuídos.",
    "Palavras-chave": "Sistemas Autodistribuídos; Linguagens de Definição de Interface (IDL); Sistemas Distribuídos Complexos.",
    "Introdução": "Sistemas contemporâneos possuem dezenas de milhões de linhas de código e precisam de profissionais habilidosos para instalar, configurar e manter, o que leva ao aumento na complexidade na criação e gestão de sistemas contemporâneos (BLAIR, 2018). Visando uma forma de gerir e reduzir essa complexidade, a solução proposta é a utilização de sistemas autonômicos, que operaram autonomicamente a partir de políticas e objetivos definidos em alto nível pelos administradores. Com isso, um dos benefícios da utilização desse tipo de sistema, é a redução da necessidade de interação humana observando a operação do sistema a todo momento, visto que o sistema poderá se adaptar de acordo com a carga de trabalho, falhas de hardware ou software e até mesmo lidar com erros durante sua execução. Os sistemas autonômicos baseiam-se em 4 propriedades: autoproteção, auto-otimização, autocura e a autoconfiguração (KEPHART; CHESS, 2003). A partir do conceito de sistemas autonômicos, o trabalho de Rodrigues-Filho e Porter (2022), entitulado “Hatch: Self-distributing systems for data centers” introduz o conceito de sistemas autodistribuídos, utilizando tecnologias que implementam um modelo baseado em componentes (como OpenCOM de Coulson et al. (2004) e Dana de Porter e Rodrigues-Filho (2021)). Sistemas autodistribuídos são sistemas que distribuem componentes, que originalmente foram projetados para serem executados localmente, para outros processos em máquinas externas em tempo de execução e de forma ininterrupta, à medida que o sistema demanda mais recursos computacionais para operar. Na abordagem descrita por Rodrigues-Filho e Porter (2020), os autores exploram, de forma conceitual, a utilização de proxy para realizar a distribuição de componentes em tempo de execução. Essa abordagem funciona da seguinte maneira: em tempo de execução o framework de sistemas autodistribuídos substitui o componente local por um proxy, ou seja, um componente que implementa a mesma interface do componente que ele substitui, mas que sua única função é encaminhar requisições que chegam a ele para réplicas do componente, que agora executam em processos remotos (em máquinas externas). Além disso, o proxy também é responsável pela consistência do estado do componente, utilizando um modelo de consistência de dados apropriado para o dado em questão. A respeito da auto-otimização, o framework SDS de Rodrigues-Filho et al. (2023) combina o modelo baseado em componentes citado anteriormente com um agente inteligente que toma decisões adaptativas em tempo de execução escolhendo a melhor composição considerando métricas como tempo de resposta e consumo de energia. Entretanto, a geração desses proxies, até o presente momento, é feita de forma manual pelo desenvolvedor, adicionando uma camada a mais de complexidade na construção dos sistema. Portanto, este trabalho visa estudar e propor uma forma de automatizar a geração desses proxies a fim de tornar mais viável a implementação de sistemas autodistribuídos. Este capítulo está organizado em quatro seções. A primeira seção apresenta a justificativa para a elaboração deste trabalho. A segunda seção contém os objetivos do trabalho, segmentados entre objetivo geral e objetivos específicos. Na terceira seção encontra-se a metodologia utilizada para o desenvolvimento deste trabalho. A quarta e última seção deste capítulo contém a estrutura do trabalho como um todo.",
    "Conclusão": "Devido à complexidade na criação e gestão de sistemas contemporâneos, foi idealizado o conceito de sistemas autodistribuídos, entretanto o processo de distribuição de componentes de forma autonômica necessita originalmente da geração manual de proxy, o que aumenta a complexidade para o desenvolvedor, visto que é necessário determinar qual algoritmo será utilizado para manter a consistência do estado do componente durante a sua distribuição, além da definição dos detalhes da comunicação entre o proxy e o componente original. Visando reduzir a dificuldade do uso de sistemas autodistribuídos por desenvolvedores, esse trabalho propôs uma maneira de automatizar a geração de proxy. Para isso é necessário acesso às informações que não estão presentes na interface dos componentes. Com isso, optou-se pela utilização de uma Linguagem de Definição de Interface (IDL), abordada em detalhes no Capítulo 4. Neste trabalho, foi utilizado como exemplo uma versão customizada do código de Araujo et al. (2021) que provê um servidor web que implementa a interface List. A partir disso, foi utilizada a linguagem Python para desenvolver um artefato denominado ProxyGenerator que junto da IDL proposta, para realizar a geração de proxies para diferentes composições: fragmentada (sharding), replicada (propagate) ou replicada mista (mixed_propagate). Com base nos experimentos realizados no Capítulo 5, utilizando duas máquinas, conectadas em uma rede local via Wi-Fi, foi possível visualizar a funcionalidade e a eficácia dos proxies gerados pelo ProxyGenerator. Os resultados demonstraram que as diferentes composições oferecem vantagens específicas dependendo do cenário operacional. Por exemplo, a composição sharding destacou-se em cenários de alta demanda computacional, reduzindo de forma significativa o tempo de processamento ao dividir a carga entre os nós remotos. Por outro lado, a composição local mostrou superioridade em ambientes com baixo processamento, onde a latência adicional de rede nas composições distribuídas não era compensada pelo aumento no desempenho. Esses resultados evidenciam a importância de utilizar proxies que implementem múltiplas composições para permitir maior adaptabilidade e otimização do desempenho do sistema em tempo de execução. Como trabalhos futuros, além da ampliação da gramática da IDL para suportar novas interfaces e estruturas de dados, é possível explorar a aplicação de algoritmos de aprendizado de máquina para identificar, em tempo real, o proxy mais adequado para diferentes situações operacionais. Essa abordagem pode otimizar ainda mais o desempenho do sistema autodistribuído, adaptando-se dinamicamente a variáveis como carga de trabalho e recursos disponíveis. Outra vertente é investigar a escalabilidade do ProxyGenerator, avaliando sua eficiência na geração de proxies em ambientes de grande escala e com alta complexidade. Adicionalmente, recomenda-se a análise detalhada do custo de adaptação do sistema durante o processo de redistribuição de componentes, considerando os impactos no desempenho e no consumo de recursos computacionais. Essas extensões podem ampliar significativamente as contribuições deste trabalho, consolidando-o como base para o avanço de sistemas autodistribuídos."
}